{"version":3,"sources":["ButtonMediaSamePlay.esm.js"],"names":["_targetElements","_paused","__classPrivateFieldGet","this","receiver","privateMap","has","TypeError","get","__classPrivateFieldSet","value","set","ButtonMediaSamePlay","HTMLButtonElement","[object Object]","super","type","targetElementIds","dataset","targetsFor","split","undefined","Error","targetElementId","targetElement","document","getElementById","push","addEventListener","_clickEvent","passive","removeEventListener","every","element","ended","currentTime","play","minTime","reduce","accumulator","currentValue","mediaElement","pause","WeakMap"],"mappings":"AAAA,IAaIA,EAAiBC,EAbjBC,EAA0BC,MAAQA,KAAKD,wBAA2B,SAAUE,EAAUC,GACtF,IAAKA,EAAWC,IAAIF,GAChB,MAAM,IAAIG,UAAU,kDAExB,OAAOF,EAAWG,IAAIJ,IAEtBK,EAA0BN,MAAQA,KAAKM,wBAA2B,SAAUL,EAAUC,EAAYK,GAClG,IAAKL,EAAWC,IAAIF,GAChB,MAAM,IAAIG,UAAU,kDAGxB,OADAF,EAAWM,IAAIP,EAAUM,GAClBA,kBAQI,MAAME,UAA4BC,kBAC7CC,cACIC,QACAf,EAAgBW,IAAIR,KAAM,IAC1BF,EAAQU,IAAIR,MAAM,GAClBA,KAAKa,KAAO,SAEhBF,oBACI,MAAMG,EAAmBd,KAAKe,QAAQC,YAAYC,MAAM,KACxD,QAAyBC,IAArBJ,EACA,MAAM,IAAIK,MAAM,6CAEpB,IAAK,MAAMC,KAAmBN,EAAkB,CAC5C,MAAMO,EAAgBC,SAASC,eAAeH,GAC9C,GAAsB,OAAlBC,EACA,MAAM,IAAIF,MAAM,aAAaC,oBAEjCrB,EAAuBC,KAAMH,GAAiB2B,KAAKH,GAEvDrB,KAAKyB,iBAAiB,QAASzB,KAAK0B,YAAa,CAAEC,SAAS,IAEhEhB,uBACIX,KAAK4B,oBAAoB,QAAS5B,KAAK0B,aAK3Cf,cACI,GAAIZ,EAAuBC,KAAMH,GAAiBgC,OAAOC,GAAYA,EAAQC,QAAQ,CAEjF,IAAK,MAAMV,KAAiBtB,EAAuBC,KAAMH,GACrDwB,EAAcW,YAAc,EAC5BX,EAAcY,OAElB3B,EAAuBN,KAAMF,GAAS,OAErC,CACD,GAAIC,EAAuBC,KAAMF,GAAU,CAEvC,MAAMoC,EAAUnC,EAAuBC,KAAMH,GAAiBsC,QAAO,CAACC,EAAaC,IAAiBD,EAAYJ,YAAcK,EAAaL,YAAcI,EAAcC,IAAcL,YACrL,IAAK,MAAMM,KAAgBvC,EAAuBC,KAAMH,GACpDyC,EAAaN,YAAcE,EAC3BI,EAAaL,YAKjB,IAAK,MAAMK,KAAgBvC,EAAuBC,KAAMH,GACpDyC,EAAaC,QAGrBjC,EAAuBN,KAAMF,GAAUC,EAAuBC,KAAMF,MAIhFD,EAAkB,IAAI2C,QAAW1C,EAAU,IAAI0C","file":"ButtonMediaSamePlay.esm.js","sourcesContent":["var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar _targetElements, _paused;\n/**\n * Simultaneous playback button for multiple audio / video.\n *\n * @version 1.0.0\n */\nexport default class ButtonMediaSamePlay extends HTMLButtonElement {\n    constructor() {\n        super();\n        _targetElements.set(this, []); // 同時再生する要素\n        _paused.set(this, true); // ボタンのステータス：一時停止中かどうか\n        this.type = 'button';\n    }\n    connectedCallback() {\n        const targetElementIds = this.dataset.targetsFor?.split(' ');\n        if (targetElementIds === undefined) {\n            throw new Error('Attribute: `data-targets-for` is not set.');\n        }\n        for (const targetElementId of targetElementIds) {\n            const targetElement = document.getElementById(targetElementId);\n            if (targetElement === null) {\n                throw new Error(`Element: #${targetElementId} can not found.`);\n            }\n            __classPrivateFieldGet(this, _targetElements).push(targetElement);\n        }\n        this.addEventListener('click', this._clickEvent, { passive: true });\n    }\n    disconnectedCallback() {\n        this.removeEventListener('click', this._clickEvent);\n    }\n    /**\n     * ボタン押下時の処理\n     */\n    _clickEvent() {\n        if (__classPrivateFieldGet(this, _targetElements).every((element) => element.ended)) {\n            /* すべての動画が再生終了していたら最初から再生を始める */\n            for (const targetElement of __classPrivateFieldGet(this, _targetElements)) {\n                targetElement.currentTime = 0;\n                targetElement.play();\n            }\n            __classPrivateFieldSet(this, _paused, false);\n        }\n        else {\n            if (__classPrivateFieldGet(this, _paused)) {\n                /* 一時停止中だったらもっとも再生時間が低い動画に合わせて再生する */\n                const minTime = __classPrivateFieldGet(this, _targetElements).reduce((accumulator, currentValue) => accumulator.currentTime < currentValue.currentTime ? accumulator : currentValue).currentTime; // すべての動画の中でもっとも再生時間が低いもの\n                for (const mediaElement of __classPrivateFieldGet(this, _targetElements)) {\n                    mediaElement.currentTime = minTime;\n                    mediaElement.play();\n                }\n            }\n            else {\n                /* 再生中だったら一時停止する */\n                for (const mediaElement of __classPrivateFieldGet(this, _targetElements)) {\n                    mediaElement.pause();\n                }\n            }\n            __classPrivateFieldSet(this, _paused, !__classPrivateFieldGet(this, _paused));\n        }\n    }\n}\n_targetElements = new WeakMap(), _paused = new WeakMap();\n"]}